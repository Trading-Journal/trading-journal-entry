{
	"info": {
		"_postman_id": "fb391cb8-ccb4-4b44-b9c6-73d4886f5239",
		"name": "Trade Journal Entries Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9011736"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Success SignIn As Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token-admin\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token-admin\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal('admin');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{admin-email}}\",\r\n  \"password\": \"{{admin-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SignUp New User",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomCompanyName}}\");\r",
									"     const companySuffix = pm.collectionVariables.replaceIn(\"{{$randomCompanySuffix}}\");\r",
									"     return companyName + ' ' + companySuffix;\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Journals",
			"item": [
				{
					"name": "Create a Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"shares-journal\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"journal-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"shares-journal\",\r\n\t\"startBalance\": 15000.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/journals",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\tpm.expect(response.name).to.equal(\"shares-journal\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"journal-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Journals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entries",
			"item": [
				{
					"name": "Create a Trade Entry 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-symbol\", randomSymbol());\r",
									"pm.collectionVariables.set(\"entry-direction\", randoDirection());\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));\r",
									"pm.collectionVariables.set(\"entry-size\",_.random(1, 10, true).toFixed(2));\r",
									"\r",
									"function randomSymbol() {\r",
									"\tvar textArray = [\r",
									"    'AAPL',\r",
									"    'MSFT',\r",
									"\t'AMZN',\r",
									"\t'TSLA',\r",
									"\t'GOOGL',\r",
									"\t'NVDA',\r",
									"\t'META'\r",
									"\t];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}\r",
									"\r",
									"function randoDirection() {\r",
									"\tvar textArray = ['LONG', 'SHORT'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"entry-id\", response.id);\r",
									"\r",
									"\tpm.collectionVariables.set(\"edit-date\", response.date);\r",
									"\tpm.collectionVariables.set(\"edit-symbol\", response.symbol);\r",
									"\tpm.collectionVariables.set(\"edit-direction\", response.direction);\r",
									"\tpm.collectionVariables.set(\"edit-price\", response.price);\r",
									"\tpm.collectionVariables.set(\"edit-size\", response.size);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"TRADE\",\r\n\t\"symbol\": \"{{entry-symbol}}\",\r\n\t\"direction\": \"{{entry-direction}}\",\r\n\t\"price\": {{entry-price}},\r\n\t\"size\": {{entry-size}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Trade Entry 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-symbol\", randomSymbol());\r",
									"pm.collectionVariables.set(\"entry-direction\", randoDirection());\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));\r",
									"pm.collectionVariables.set(\"entry-size\",_.random(1, 10, true).toFixed(2));\r",
									"\r",
									"function randomSymbol() {\r",
									"\tvar textArray = [\r",
									"    'AAPL',\r",
									"    'MSFT',\r",
									"\t'AMZN',\r",
									"\t'TSLA',\r",
									"\t'GOOGL',\r",
									"\t'NVDA',\r",
									"\t'META'\r",
									"\t];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}\r",
									"\r",
									"function randoDirection() {\r",
									"\tvar textArray = ['LONG', 'SHORT'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"TRADE\",\r\n\t\"symbol\": \"{{entry-symbol}}\",\r\n\t\"direction\": \"{{entry-direction}}\",\r\n\t\"price\": {{entry-price}},\r\n\t\"size\": {{entry-size}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Trade Entry 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-symbol\", randomSymbol());\r",
									"pm.collectionVariables.set(\"entry-direction\", randoDirection());\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));\r",
									"pm.collectionVariables.set(\"entry-size\",_.random(1, 10, true).toFixed(2));\r",
									"\r",
									"function randomSymbol() {\r",
									"\tvar textArray = [\r",
									"    'AAPL',\r",
									"    'MSFT',\r",
									"\t'AMZN',\r",
									"\t'TSLA',\r",
									"\t'GOOGL',\r",
									"\t'NVDA',\r",
									"\t'META'\r",
									"\t];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}\r",
									"\r",
									"function randoDirection() {\r",
									"\tvar textArray = ['LONG', 'SHORT'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"TRADE\",\r\n\t\"symbol\": \"{{entry-symbol}}\",\r\n\t\"direction\": \"{{entry-direction}}\",\r\n\t\"price\": {{entry-price}},\r\n\t\"size\": {{entry-size}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Deposit  Entry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"DEPOSIT\",\r\n\t\"price\": {{entry-price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Taxes Entry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"TAXES\",\r\n\t\"price\": {{entry-price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Withdrawal Entry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"date\": \"{{entry-date}}\",\r\n\t\"type\": \"WITHDRAWAL\",\r\n\t\"price\": {{entry-price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-symbol\", randomSymbol());\r",
									"pm.collectionVariables.set(\"entry-direction\", randoDirection());\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));\r",
									"pm.collectionVariables.set(\"entry-size\",_.random(10, 100, true).toFixed(2));\r",
									"\r",
									"function randomSymbol() {\r",
									"\tvar textArray = [\r",
									"    'AAPL',\r",
									"    'MSFT',\r",
									"\t'AMZN',\r",
									"\t'TSLA',\r",
									"\t'GOOGL',\r",
									"\t'NVDA',\r",
									"\t'META'\r",
									"\t];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}\r",
									"\r",
									"function randoDirection() {\r",
									"\tvar textArray = ['LONG', 'SHORT'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Trade Entry 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const direction = pm.collectionVariables.get(\"edit-direction\");\r",
									"\r",
									"const entryPrice = parseFloat(pm.collectionVariables.get(\"edit-price\")).toFixed(2);\r",
									"\r",
									"var profitPrice;\r",
									"var lossPrice;\r",
									"if(direction == 'LONG') {\r",
									"\tprofitPrice = parseFloat(entryPrice) + parseFloat(Math.round(entryPrice * 0.2).toFixed(2));\r",
									"\tlossPrice = entryPrice - Math.round(entryPrice * 0.1).toFixed(2);\r",
									"} else {\r",
									"\tprofitPrice = entryPrice - Math.round(entryPrice * 0.15).toFixed(2);\r",
									"\tlossPrice = entryPrice + parseFloat(Math.round(entryPrice * 0.1).toFixed(2));\r",
									"}\r",
									"\r",
									"const costs = Math.round(entryPrice * 0.01).toFixed(2);\r",
									"\r",
									"pm.collectionVariables.set(\"profitPrice\", profitPrice);\r",
									"pm.collectionVariables.set(\"lossPrice\", lossPrice);\r",
									"pm.collectionVariables.set(\"costs\", costs);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry-id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": \"{{entry-id}}\",\r\n\t\"date\": \"{{edit-date}}\",\r\n\t\"type\": \"TRADE\",\r\n\t\"symbol\": \"{{edit-symbol}}\",\r\n\t\"direction\": \"{{edit-direction}}\",\r\n\t\"price\": {{edit-price}},\r\n\t\"size\": {{edit-size}},\r\n\t\"profitPrice\": {{profitPrice}},\r\n\t\"lossPrice\": {{lossPrice}},\r\n\t\"costs\": {{costs}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.collectionVariables.set(\"entry-date\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"pm.collectionVariables.set(\"entry-symbol\", randomSymbol());\r",
									"pm.collectionVariables.set(\"entry-direction\", randoDirection());\r",
									"pm.collectionVariables.set(\"entry-price\",_.random(10, 1999, true).toFixed(2));\r",
									"pm.collectionVariables.set(\"entry-size\",_.random(10, 100, true).toFixed(2));\r",
									"\r",
									"function randomSymbol() {\r",
									"\tvar textArray = [\r",
									"    'AAPL',\r",
									"    'MSFT',\r",
									"\t'AMZN',\r",
									"\t'TSLA',\r",
									"\t'GOOGL',\r",
									"\t'NVDA',\r",
									"\t'META'\r",
									"\t];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}\r",
									"\r",
									"function randoDirection() {\r",
									"\tvar textArray = ['LONG', 'SHORT'];\r",
									"\tvar randomNumber = Math.floor(Math.random()*textArray.length);\r",
									"\treturn  textArray[randomNumber];\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.equal(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exit Trade Entry 1 Winning",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.collectionVariables.set(\"exitDate\", moment().format(\"YYYY-MM-DD HH:mm:ss\"));\r",
									"\r",
									"const profitPrice = parseFloat(pm.collectionVariables.get(\"profitPrice\")).toFixed(2);\r",
									"const exitPrice = profitPrice - Math.round(profitPrice * 0.01).toFixed(2);\r",
									"\r",
									"pm.collectionVariables.set(\"exitPrice\", exitPrice);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"entry-id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": \"{{entry-id}}\",\r\n\t\"date\": \"{{edit-date}}\",\r\n\t\"type\": \"TRADE\",\r\n\t\"symbol\": \"{{edit-symbol}}\",\r\n\t\"direction\": \"{{edit-direction}}\",\r\n\t\"price\": {{edit-price}},\r\n\t\"size\": {{edit-size}},\r\n\t\"profitPrice\": {{profitPrice}},\r\n\t\"lossPrice\": {{lossPrice}},\r\n\t\"costs\": {{costs}},\r\n\t\"exitPrice\": {{exitPrice}},\r\n\t\"exitDate\": \"{{exitDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{entry-api}}/entries/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"entries",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean Test",
			"item": [
				{
					"name": "Delete Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{entry-api}}/journals/{{journal-id}}",
							"host": [
								"{{entry-api}}"
							],
							"path": [
								"journals",
								"{{journal-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Tenancy by User email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(true);\r",
									"\r",
									"\tpm.collectionVariables.set('tenancy-id', response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access-token",
			"value": ""
		},
		{
			"key": "refresh-token",
			"value": ""
		},
		{
			"key": "entry-date",
			"value": ""
		},
		{
			"key": "entry-symbol",
			"value": ""
		},
		{
			"key": "entry-direction",
			"value": ""
		},
		{
			"key": "user-price",
			"value": ""
		},
		{
			"key": "entry-price",
			"value": ""
		},
		{
			"key": "journal-id",
			"value": ""
		},
		{
			"key": "entry-size",
			"value": ""
		},
		{
			"key": "entry-id",
			"value": ""
		},
		{
			"key": "access-token-admin",
			"value": ""
		},
		{
			"key": "refresh-token-admin",
			"value": ""
		},
		{
			"key": "company-name",
			"value": ""
		},
		{
			"key": "first-name",
			"value": ""
		},
		{
			"key": "last-name",
			"value": ""
		},
		{
			"key": "user-name",
			"value": ""
		},
		{
			"key": "user-email",
			"value": ""
		},
		{
			"key": "user-verification-hash",
			"value": ""
		},
		{
			"key": "edit-date",
			"value": ""
		},
		{
			"key": "edit-symbol",
			"value": ""
		},
		{
			"key": "edit-direction",
			"value": ""
		},
		{
			"key": "edit-price",
			"value": ""
		},
		{
			"key": "edit-size",
			"value": ""
		},
		{
			"key": "profitPrice",
			"value": ""
		},
		{
			"key": "lossPrice",
			"value": ""
		},
		{
			"key": "costs",
			"value": ""
		},
		{
			"key": "exitDate",
			"value": ""
		},
		{
			"key": "exitPrice",
			"value": ""
		},
		{
			"key": "tenancy-id",
			"value": ""
		},
		{
			"key": "user-id",
			"value": ""
		}
	]
}